generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DOCTOR
  NURSE
  PATIENT
  LABTECHNICIAN
}

model User {
  id        Int      @id @default(autoincrement())
  nic       String   @unique
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  nic          String @id @unique
  name         String
  age          String
  gender       String
  livingStatus String
  phone        String

  reason         String?
  city           String
  stateProvince  String
  postalCode     String
  country        String
  streetAddress  String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  admissionsheet AdmissionSheet[]
  admissionbook  Admissionbook[]
  labtest        Labtest[]
  drugChart      DrugChart[]
  outPatient     OutPatientFrom[]
}

model AdmissionSheet {
  id            Int       @id @default(autoincrement())
  bht           Int       @unique
  nic           String
  livingStatus  String
  name          String
  age           String
  gender        String
  city          String
  stateProvince String
  postalCode    String
  country       String
  streetAddress String
  phone         String
  wardNo        String
  reason        String
  pressure      String
  weight        String
  diagnose      String?
  Patient       Patient?  @relation(fields: [nic], references: [nic])
  dischargeDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Admissionbook {
  id               Int       @id @default(autoincrement())
  bht              Int       @unique
  nic              String
  name             String
  phone            String
  livingStatus     String
  dailyno          Int?
  yearlyno         Int?
  city             String
  stateProvince    String
  postalCode       String
  country          String
  streetAddress    String
  age              String
  admittedDate     DateTime?
  reason           String
  allergies        String[]
  transferCategory String
  wardNo           String
  dischargeDate    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Patient          Patient?  @relation(fields: [nic], references: [nic])
}

model Labtest {
  id      Int      @id @default(autoincrement())
  nic     String   @unique
  bht     Int      @unique
  testno  Int
  date    DateTime
  test    String
  result  String
  Patient Patient  @relation(fields: [nic], references: [nic])
}

model DrugChart {
  id        Int      @id @default(autoincrement())
  bht       Int      @unique
  nic       String   @unique
  name      String
  dose      String
  frequency String
  date      DateTime
  Patient   Patient  @relation(fields: [nic], references: [nic])
}

model Ward {
  wardId       Int     @id @default(autoincrement())
  wardNo       String  @unique
  wardName     String
  noOfBeds     Int
  noOfUsedBeds Int
  noOfFreeBeds Int
  noOfPatients Int
  telephone    String
  noffdoctors  Int
  nofNurses    Int
  drugs        Drugs[] @relation("WardDrugs")
}

model Drugs {
  drugId            Int       @id @default(autoincrement())
  drugName          String
  unit              String
  totalQuantity     Int
  usedQuantity      Int?
  remainingQuantity Int?
  expiryDate        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  wards Ward[] @relation("WardDrugs")
}

model OutPatientFrom {
  id            Int      @id @default(autoincrement())
  nic           String
  name          String
  age           String?
  gender        String?
  livingStatus  String?
  phone         String?
  description   String?
  reason        String?
  city          String?
  stateProvince String?
  postalCode    String?
  country       String?
  streetAddress String?
  prescriptions Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Patient       Patient? @relation(fields: [nic], references: [nic])
}

model DrugAllocation {
  id            Int     @id @default(autoincrement())
  drugId        Int     @unique
  drugName      String
  totalQuantity Int
  wardName      String
  unit          String?

  usedQuantity Int?
  dateGiven    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model clinic {
  id         Int      @id @default(autoincrement())
  name       String
  doctorName String
  location   String
  sheduledAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
